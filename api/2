package online.fimbi.Entities;

import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Max;
import javax.validation.constraints.Size;

import lombok.Data;
import lombok.NoArgsConstructor;
import online.fimbi.Dto.BondDto;

@Entity
@Table(name = "bond")
@Data
@NoArgsConstructor

public class Bond {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	Long id;

	// has only one issuer
	@ManyToOne
	@JoinColumn(name = "issuer_id", insertable = false, updatable = false)
	private Issuer issuer;

	// can have none or many relations with users
	// as long as is less than `splits`
	@OneToMany
	@JoinColumn(name = "bond_id") // we need to duplicate the physical information
	@Size(min = 0, max = 100)
	private Set<UserxBond> relations;

	@Column(nullable = false)
	@Max(100)
	int splits;

	@Column(nullable = false)
	Long issuer_id;

	@Column(nullable = false)
	@Temporal(TemporalType.DATE)
	Date emission_date;

	@Column(nullable = false)
	@Temporal(TemporalType.DATE)
	Date due_date;

	@Column(nullable = false)
	Long total_value;

	@Column(nullable = false)
	Long nominal_value;

	@Column(nullable = false)
	float interest_rate;

	@Column(nullable = false)
	float capitalization_rate;

	@Column(nullable = false, length = 32)
	String external_interest_rate;

	@Column(nullable = false)
	int available;

	@Column(nullable = false)
	Long public_value;

	@Column(nullable = false)
	float income_tax;

	@Column(nullable = false)
	float prime_vcto;

	@Column(nullable = false)
	float struct;

	@Column(nullable = false)
	float colocacion;

	@Column(nullable = false)
	float floating;

	@Column(nullable = false)
	float cavali;

	@Column(nullable = false)
	float tea_coupon;

	@Column(nullable = false)
	float yield_to_mat;

	@Column(nullable = false)
	float coupon_val;

	@Column(nullable = false)
	float return_rate; // IRR

	private int error;

	public Bond(BondDto bondDto, Long issuer_id) {
		// Daily: 1
		// Monthly: 2
		// Anually: 3
		this.emission_date = new Date(); // today
		this.splits = bondDto.getSplits();
		this.issuer_id = issuer_id;
		this.due_date = bondDto.getDue_date();
		this.total_value = bondDto.getTotal_value();
		this.nominal_value = Long.valueOf(Math.round(this.total_value / this.splits));
		this.interest_rate = bondDto.getInterest_rate();
		this.capitalization_rate = bondDto.getCapitalization_rate();
		this.external_interest_rate = bondDto.getExternal_interest_rate();
		this.splits = bondDto.getSplits();
		this.available = 1;

		this.public_value = Math.round(this.nominal_value * 1.01);
		this.income_tax = 0.25f;
		this.prime_vcto = 1.0f;
		this.struct = 0.450f;
		this.colocacion = 0.250f;
		this.floating = 0.150f;
		this.cavali = 0.500f;
		this.tea_coupon = 7.5f;
		this.yield_to_mat = 6.0f;

		this.coupon_val = this.nominal_value * this.tea_coupon;
		int periods = 0;
		float cash_flow[];
		if (this.capitalization_rate == 3) {
			periods = this.due_date.getYear() - this.emission_date.getYear();
			if (periods == 0) {
				error = 1;
				return;
			}
			cash_flow = new float[periods];

			cash_flow[0] = -(this.public_value * (1 - (this.floating + this.cavali)));
			for (int i = 1; i < periods - 1; i++) {
				cash_flow[i] = this.coupon_val;
			}
			cash_flow[periods - 1] = this.coupon_val + this.nominal_value;
		}
		if (this.capitalization_rate == 1) {
			periods = (int) ChronoUnit.DAYS.between(
					this.emission_date.toInstant(),
					this.due_date.toInstant());

			if (periods == 0) {
				error = 1;
				return;
			}

		}
		System.out.println(String.format("%d periods initialized", periods));

	}
}
